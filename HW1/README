# James Li
# gli38
# README

############

f1: Makefile
f2: README

c1: make
e1: NQueens.jar
p1: java -jar NQueens.jar
t1: test-input.txt
o1: out.txt
i1: test-output.txt

############

This program finishes handling datas in more-input.txt within 110 seconds.

###########

Note: I got the idea of permutation from one of my assignments in CS12A by Prof. Tantalo.

HOWEVER, this recursive permutation method was coded by myself.
(Prof. Tantalo did not teach us to use a recursive method for permutation.)


Prof. Tantalo's version (pseudo-code):

scan the array from right-to-left
    if the current element is less than its right-hand neighbor
        call the current element the pivot
        stop scanning
if the left end was reached without finding a pivot
    reverse the array (permutation was lexicographically last, so start over)
    return
scan the array from right-to-left again
    if the current element is larger than the pivot
        call the current element the successor
        stop scanning
swap the pivot and the successor
reverse the portion of the array to the right of where the pivot was found 
return



What my code does:
for instance: 1234

print: 1234
(rotate 3 and 4)
print: 1243
(rotate back but does not print)
1234
(rotate 234)
print: 1342
(rotate 4 and 2)
print: 1424
(rotate back but does not print)
1342
(rotate 342)
print: 1423
...

(Only when the rotate size hits 2 does the program prints out the result)

Rotate: Take the first element out, shift all others left by 1 slot, and put the first element at the right end.
if I rotate "123" the output will be "231".

############################

Shortcomings of my program:
My program uses some "brutal force". 

1. I used sc.nextLine() and trimmed the input. However, I failed the test for many times. Then I uses 
my "brutal force" method: declare a queue for a sufficient length to take all the input. Each time it 
enters into the while loop, it pops three datas from the input queue.

2. Then I found that my print method lies within my recursive call, which causes a problem that I am
unable to print the result into the output file. Then another "brutal force" approach comes: I store
all the output numbers in another large queue and print the queue out in my main function.

Although my program "seems" complied and ran perferctly, the underlying code is brutal. Perhaps I might lose
some points for letting graders know this shortcoming of my program, but I think I have to admit that. This
program does have some imperfections.

