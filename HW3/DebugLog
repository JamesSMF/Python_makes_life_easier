The basic procedure for move functions are:
1. check if the chess can reach the specific square
2. check blocks on its way
3. check if there is any chess at the destination square
   if theSameColor:
      CannotGoThere
   else:
      the chess on that square is dead
4. move the chess to that square

--------------------------------------------

I should override the method insert() to accept both coordinate and Link.

--------------------------------------------

The bishopMove function always return true. The problem is not inside the function, but lies in the input array.
Problem solved. The problem was I did not use charAt().

--------------------------------------------

Bishop is good for now (might fail on some test cases, but generally good). Now work on revising other functions. The general struture can be borrowed from bishopMove().

--------------------------------------------

Fuck NullPointerException.
Now I'm trying to count link numbers at certain points to test if insertFirst() and delete() work fine.

Problem fixed. I should have broken the loop after inserting.

--------------------------------------------

The new conundrum is queenMove(). Even if I input the char 'R', the underlying algorithm still takes 'Q' as its input.

Problem fixed. Changed the comparison of chars to the comparison of actual rows and cols.

--------------------------------------------

knightMove() and pawnMove() might be a little bit challenging. But they are after all similar shit.

--------------------------------------------

Test for simple-input.txt all passed. Now work on the check check.
1. After each move, find the current position of the king
2. If any opposite color chess can attack this motherfucKING, print out "illegal".
